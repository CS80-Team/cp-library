!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ahmed/cp-library/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
MOD	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^constexpr int MOD = 1e9+7; \/\/ must be a prime number$/;"	v	typeref:typename:int
NEUTRAL	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    const Node NEUTRAL = {INT_MIN};$/;"	m	struct:SegTree	typeref:typename:const Node	file:	access:private
Node	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^struct Node {$/;"	s	file:
Node::val	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    long long val;$/;"	m	struct:Node	typeref:typename:long long	file:	access:public
SegTree	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^struct SegTree {$/;"	s	file:
SegTree::NEUTRAL	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    const Node NEUTRAL = {INT_MIN};$/;"	m	struct:SegTree	typeref:typename:const Node	file:	access:private
SegTree::build	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void build(vector<int> &a) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(vector<int> & a)
SegTree::build	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void build(vector<int> &a, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(vector<int> & a,int x,int lx,int rx)
SegTree::init	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void init(int _size) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int _size)
SegTree::merge	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    static Node merge(const Node& x1, const Node& x2) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:private	signature:(const Node & x1,const Node & x2)
SegTree::query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    Node query(const int& l, const int& r) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:public	signature:(const int & l,const int & r)
SegTree::query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    Node query(const int& l, const int& r, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:private	signature:(const int & l,const int & r,int x,int lx,int rx)
SegTree::set	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void set(const int& idx, const int& val, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(const int & idx,const int & val,int x,int lx,int rx)
SegTree::set	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void set(int idx, int val) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int idx,int val)
SegTree::size	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    int size{};$/;"	m	struct:SegTree	typeref:typename:int	file:	access:public
SegTree::values	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    vector<Node> values;$/;"	m	struct:SegTree	typeref:typename:vector<Node>	file:	access:public
add	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^int add(int a, int b) {$/;"	f	typeref:typename:int	signature:(int a,int b)
build	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void build(vector<int> &a) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(vector<int> & a)
build	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void build(vector<int> &a, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(vector<int> & a,int x,int lx,int rx)
div	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^int div(int a, int b) {$/;"	f	typeref:typename:int	signature:(int a,int b)
erase_set	/home/ahmed/cp-library/DataStructures/OrderedSet/ordered_set.cpp	/^void erase_set(ordered_set &os, int v) {$/;"	f	typeref:typename:void	signature:(ordered_set & os,int v)
init	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void init(int _size) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int _size)
inverse	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^int inverse(int a) {$/;"	f	typeref:typename:int	signature:(int a)
merge	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    static Node merge(const Node& x1, const Node& x2) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:private	signature:(const Node & x1,const Node & x2)
ordered_set	/home/ahmed/cp-library/DataStructures/OrderedSet/ordered_set.cpp	/^using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;$/;"	t	typeref:typename:tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>	file:
power	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^int power(int a, int e) {$/;"	f	typeref:typename:int	signature:(int a,int e)
query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    Node query(const int& l, const int& r) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:public	signature:(const int & l,const int & r)
query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    Node query(const int& l, const int& r, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:Node	file:	access:private	signature:(const int & l,const int & r,int x,int lx,int rx)
set	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void set(const int& idx, const int& val, int x, int lx, int rx) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(const int & idx,const int & val,int x,int lx,int rx)
set	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    void set(int idx, int val) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int idx,int val)
size	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    int size{};$/;"	m	struct:SegTree	typeref:typename:int	file:	access:public
sub	/home/ahmed/cp-library/Templates/modTemplate.cpp	/^int sub(int a, int b) {$/;"	f	typeref:typename:int	signature:(int a,int b)
val	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    long long val;$/;"	m	struct:Node	typeref:typename:long long	file:	access:public
values	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/SegTreeBasic.cpp	/^    vector<Node> values;$/;"	m	struct:SegTree	typeref:typename:vector<Node>	file:	access:public
