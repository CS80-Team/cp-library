!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
SegTree	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^struct SegTree {$/;"	s	file:
SegTree::init	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void init(int _size) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int _size)
SegTree::lazy	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    vector<int> values, lazy;$/;"	m	struct:SegTree	typeref:typename:vector<int>	file:	access:public
SegTree::propegate	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void propegate(int lx, int rx, int node) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(int lx,int rx,int node)
SegTree::range_query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int range_query(int l, int r) {$/;"	f	struct:SegTree	typeref:typename:int	file:	access:public	signature:(int l,int r)
SegTree::range_query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int range_query(int l, int r, int lx, int rx, int node) {$/;"	f	struct:SegTree	typeref:typename:int	file:	access:private	signature:(int l,int r,int lx,int rx,int node)
SegTree::size	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int size{};$/;"	m	struct:SegTree	typeref:typename:int	file:	access:public
SegTree::update_range	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void update_range(int l, int r, int node, int lx, int rx, int val, bool f) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(int l,int r,int node,int lx,int rx,int val,bool f)
SegTree::update_range	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void update_range(int l, int r, int v, bool f) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int l,int r,int v,bool f)
SegTree::values	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    vector<int> values, lazy;$/;"	m	struct:SegTree	typeref:typename:vector<int>	file:	access:public
init	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void init(int _size) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int _size)
lazy	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    vector<int> values, lazy;$/;"	m	struct:SegTree	typeref:typename:vector<int>	file:	access:public
propegate	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void propegate(int lx, int rx, int node) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(int lx,int rx,int node)
range_query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int range_query(int l, int r) {$/;"	f	struct:SegTree	typeref:typename:int	file:	access:public	signature:(int l,int r)
range_query	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int range_query(int l, int r, int lx, int rx, int node) {$/;"	f	struct:SegTree	typeref:typename:int	file:	access:private	signature:(int l,int r,int lx,int rx,int node)
size	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    int size{};$/;"	m	struct:SegTree	typeref:typename:int	file:	access:public
update_range	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void update_range(int l, int r, int node, int lx, int rx, int val, bool f) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:private	signature:(int l,int r,int node,int lx,int rx,int val,bool f)
update_range	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    void update_range(int l, int r, int v, bool f) {$/;"	f	struct:SegTree	typeref:typename:void	file:	access:public	signature:(int l,int r,int v,bool f)
values	/home/ahmed/cp-library/DataStructures/Ranges/SegmentTree/lazy_propagate.cpp	/^    vector<int> values, lazy;$/;"	m	struct:SegTree	typeref:typename:vector<int>	file:	access:public
