!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ahmed/cp-library/Algorithms/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
M	/home/ahmed/cp-library/Algorithms/MO.cpp	/^const int N = 1e5+5, M = 1e5+5;$/;"	v	typeref:typename:const int
N	/home/ahmed/cp-library/Algorithms/MO.cpp	/^const int N = 1e5+5, M = 1e5+5;$/;"	v	typeref:typename:const int
Query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^vector<query> Query(m);$/;"	p	typeref:typename:vector<query>	file:	signature:(m)
add	/home/ahmed/cp-library/Algorithms/MO.cpp	/^void add(int idx) {$/;"	f	typeref:typename:void	signature:(int idx)
ans	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int freq[N], ans;$/;"	v	typeref:typename:int
block_idx	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
freq	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int freq[N], ans;$/;"	v	typeref:typename:int[]
i	/home/ahmed/cp-library/Algorithms/MO.cpp	/^for (int i = 0; i < m; ++i) {$/;"	v	typeref:typename:int
i	/home/ahmed/cp-library/Algorithms/MO.cpp	/^for (int i = 0; i < n; ++i) cin >> nums[i];$/;"	v	typeref:typename:int
idx	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
l	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
l	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int l, r; cin >> l >> r;$/;"	v	typeref:typename:int
l0	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int l0 = 1, r0 = 0;$/;"	v	typeref:typename:int
m	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int n, m;$/;"	v	typeref:typename:int
n	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int n, m;$/;"	v	typeref:typename:int
nums	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int nums[N], q_ans[M];$/;"	v	typeref:typename:int[]
operator <	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    bool operator <(const query & y) const {$/;"	f	struct:query	typeref:typename:bool	file:	access:public	signature:(const query & y) const
q_ans	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int nums[N], q_ans[M];$/;"	v	typeref:typename:int[]
query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    query() = default;$/;"	p	struct:query	file:	access:public	signature:()
query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    query(int _l, int _r, int _idx) {$/;"	f	struct:query	file:	access:public	signature:(int _l,int _r,int _idx)
query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^struct query {$/;"	s	file:
query::block_idx	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
query::idx	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
query::l	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
query::operator <	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    bool operator <(const query & y) const {$/;"	f	struct:query	typeref:typename:bool	file:	access:public	signature:(const query & y) const
query::query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    query() = default;$/;"	p	struct:query	file:	access:public	signature:()
query::query	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    query(int _l, int _r, int _idx) {$/;"	f	struct:query	file:	access:public	signature:(int _l,int _r,int _idx)
query::r	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
r	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int idx, block_idx, l, r;$/;"	m	struct:query	typeref:typename:int	file:	access:public
r	/home/ahmed/cp-library/Algorithms/MO.cpp	/^    int l, r; cin >> l >> r;$/;"	v	typeref:typename:int
r0	/home/ahmed/cp-library/Algorithms/MO.cpp	/^int l0 = 1, r0 = 0;$/;"	v	typeref:typename:int
remove	/home/ahmed/cp-library/Algorithms/MO.cpp	/^void remove(int idx) {$/;"	f	typeref:typename:void	signature:(int idx)
